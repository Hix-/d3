// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require(['jquery', 'd3', 'underscore'], function($, d3, _) {
    var Spin, getParams, mapCoords, start;
    _.random = function(max) {
      var min, range;
      min = 0;
      range = max - min;
      return 0 | (min + Math.random() * (range + 1));
    };
    _.mixin({
      randomItem: function(list) {
        return list[_.random(list.length - 1)];
      }
    });
    getParams = function() {
      return {
        p: window.location.hash.substr(1)
      };
    };
    mapCoords = function(coords) {
      return coords.map(function(c) {
        if (typeof c[0] === 'number') {
          return [c[0] + Math.random() - 0.5, c[1] + Math.random() - 0.5];
        } else {
          return mapCoords(c);
        }
      });
    };
    Spin = (function() {

      Spin.prototype.c = {
        width: 1024,
        height: 580
      };

      function Spin() {
        this.drawArcs = __bind(this.drawArcs, this);

        this.randomArc = __bind(this.randomArc, this);

        this.drawCountries = __bind(this.drawCountries, this);

        this.mutateCountryData = __bind(this.mutateCountryData, this);

        this.mutateCountry = __bind(this.mutateCountry, this);

        this.redraw = __bind(this.redraw, this);

        this.spin = __bind(this.spin, this);

        this.onMouseUp = __bind(this.onMouseUp, this);

        this.onMouseMove = __bind(this.onMouseMove, this);

        this.onMouseDown = __bind(this.onMouseDown, this);

        this.startSpin = __bind(this.startSpin, this);

        var origin,
          _this = this;
        this.date = d3.select('h2');
        this.svg = d3.select('body').append('svg').attr('width', this.c.width).attr('height', this.c.height).on('mousedown', this.onMouseDown);
        if (getParams().p) {
          origin = getParams().p.split(',').map(function(p) {
            return parseFloat(p);
          });
        } else {
          origin = [-71.03, 42.37];
        }
        this.projection = d3.geo.azimuthal().scale(250).origin(origin).mode('orthographic').translate([this.c.width / 2, this.c.height / 2]);
        this.svg.append('circle').attr('class', 'earth').attr('r', 250).attr('cx', this.c.width / 2).attr('cy', this.c.height / 2);
        this.path = d3.geo.path().projection(this.projection).pointRadius(3);
        this.circle = d3.geo.greatCircle().origin(this.projection.origin());
        d3.select(window).on('mousemove', this.onMouseMove).on('mouseup', this.onMouseUp);
        this.clip = function(d) {
          return _this.path(_this.circle.clip(d));
        };
        this.countries_g = this.svg.append('svg:g').attr('class', 'countries');
        this.drawCountries();
      }

      Spin.prototype.startSpin = function() {
        return d3.timer(this.spin);
      };

      Spin.prototype.m0 = null;

      Spin.prototype.o0 = null;

      Spin.prototype.onMouseDown = function() {
        this.m0 = [d3.event.pageX, d3.event.pageY];
        this.o0 = this.projection.origin();
        return d3.event.preventDefault();
      };

      Spin.prototype.onMouseMove = function() {
        var m0, m1, o0, o1;
        if (this.m0) {
          m0 = this.m0;
          o0 = this.o0;
          m1 = [d3.event.pageX, d3.event.pageY];
          o1 = [o0[0] + (m0[0] - m1[0]) / 8, o0[1] + (m1[1] - m0[1]) / 8];
          window.location.hash = o1;
          this.projection.origin(o1);
          this.circle.origin(o1);
          return this.redraw();
        }
      };

      Spin.prototype.onMouseUp = function() {
        if (this.m0) {
          this.onMouseMove();
          return this.m0 = null;
        }
      };

      Spin.prototype.spins = 0;

      Spin.prototype.spin = function() {
        var origin;
        origin = this.projection.origin();
        origin[0] = origin[0] + 0.5;
        this.projection.origin(origin);
        this.circle.origin(origin);
        this.redraw();
        return false;
      };

      Spin.prototype.redraw = function() {
        this.mutateCountryData();
        this.countries.data(this.data, function(d) {
          return d.properties.name;
        }).attr('d', this.clip);
        if (this.flights) {
          return this.flights.attr('d', this.arc).style('stroke-dasharray', function(d) {
            return "" + (this.getTotalLength()) + "," + (this.getTotalLength());
          });
        }
      };

      Spin.prototype.mutateCountry = function(co) {
        co.geometry.coordinates = co.geometry.coordinates.map(function(parts) {
          return mapCoords(parts);
        });
        return co;
      };

      Spin.prototype.mutating = {};

      Spin.prototype.mutateCountryData = function() {
        var _this = this;
        return this.data = this.data.map(function(d) {
          if (_this.mutating && _this.mutating[d.properties.name]) {
            return _this.mutateCountry(d);
          } else {
            return d;
          }
        });
      };

      Spin.prototype.drawCountries = function() {
        var _this = this;
        return d3.json('../data/world-countries.json', function(collection) {
          _this.data = collection.features;
          _this.countries = _this.countries_g.selectAll('path').data(_this.data, function(d) {
            return d.properties.name;
          }).enter().append('svg:path').attr('d', _this.clip).attr('class', function(d) {
            return d.properties.name;
          });
          _this.startSpin();
          return _this.randomArc();
        });
      };

      Spin.prototype.randomArc = function() {
        var arc, findCoords, from, to;
        from = _.randomItem(this.data);
        to = _.randomItem(this.data);
        findCoords = function(array) {
          if (typeof array[0] === 'number') {
            return array;
          } else {
            return findCoords(array[0]);
          }
        };
        arc = {
          id: "" + from.properties.name + "-" + to.properties.name,
          source: findCoords(from.geometry.coordinates),
          target: findCoords(to.geometry.coordinates),
          targetCountry: to
        };
        return this.drawArcs([arc]);
      };

      Spin.prototype.drawArcs = function(arcs) {
        var arc,
          _this = this;
        arc = d3.geo.greatArc().source(function(d) {
          return d.source;
        }).target(function(d) {
          return d.target;
        });
        this.arc = function(d) {
          return _this.path(_this.circle.clip(arc(d)));
        };
        this.flights = this.svg.selectAll('path.flight').data(arcs, function(d) {
          return d.id;
        });
        this.flights.exit().remove();
        return this.flights.enter().append('svg:path').attr('class', 'flight').attr('d', this.arc).style('stroke-dasharray', function(d) {
          return "" + (this.getTotalLength()) + "," + (this.getTotalLength());
        }).style('stroke-dashoffset', function(d) {
          return this.getTotalLength();
        }).transition().duration(1000).style('stroke-dashoffset', 0).each('end', function(d) {
          _this.mutating[d.targetCountry.properties.name] = true;
          return _this.randomArc();
        });
      };

      return Spin;

    })();
    start = function() {
      return window.spin = new Spin;
    };
    return $(function() {
      return start();
    });
  });

}).call(this);
