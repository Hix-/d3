// Generated by CoffeeScript 1.3.3
(function() {

  require(['d3', 'underscore'], function(d3, _) {
    var bumpDomain, config, moveNote, notedata, notes, pan, updateNotePositions, whiteboard, x, y, zoomIn, _x, _y;
    notedata = [
      {
        id: 1,
        x: 50,
        y: 50,
        text: 'foo'
      }, {
        id: 2,
        x: -1000,
        y: -1000,
        text: 'bar'
      }
    ];
    config = {
      initialFontSize: 5
    };
    whiteboard = d3.select('.whiteboard');
    _x = d3.scale.linear().range([0, parseInt(whiteboard.style('width'))]).domain([-10000, 10000]);
    _y = d3.scale.linear().range([0, parseInt(whiteboard.style('height'))]).domain([-10000, 10000]);
    x = function(d) {
      return _x(d.x);
    };
    y = function(d) {
      return _y(d.y);
    };
    notes = whiteboard.selectAll('.note').data(notedata, function(d) {
      return d.id;
    });
    notes.enter().append('div').attr('class', 'note').html(function(d) {
      return d.text;
    }).style('left', x).style('top', y).attr('contentEditable', true);
    whiteboard.on('mousewheel', function() {
      return zoomIn(-1 * d3.event.wheelDelta);
    });
    whiteboard.on('mousedown', function() {
      return whiteboard.on('mousemove', pan);
    });
    whiteboard.on('mouseup', function() {
      return whiteboard.on('mousemove', null);
    });
    moveNote = function(d) {
      var move;
      move = [_x.invert(0) - _x.invert(d3.event.webkitMovementX), _y.invert(0) - _y.invert(d3.event.webkitMovementY)];
      d.x -= move[0];
      d.y -= move[1];
      return updateNotePositions();
    };
    notes.on('mousedown', function(d) {
      d3.event.stopPropagation();
      return whiteboard.on('mousemove', function() {
        return moveNote(d);
      });
    });
    notes.on('mouseup', function() {
      return d3.select(this).on('mousemove', null);
    });
    updateNotePositions = function() {
      var fontSize, ydom;
      notes.data(notedata, function(d) {
        return d.id;
      }).style('left', x).style('top', y);
      ydom = _y.domain();
      fontSize = 1000 / ((ydom[1] - ydom[0]) * 0.0025);
      return whiteboard.style('font-size', fontSize);
    };
    bumpDomain = function(scale, bump) {
      var d;
      d = scale.domain();
      return scale.domain([d[0] + bump[0], d[1] + bump[1]]);
    };
    zoomIn = function(n) {
      bumpDomain(_x, [n, -n]);
      bumpDomain(_y, [n, -n]);
      return updateNotePositions();
    };
    return pan = function() {
      var move;
      move = [_x.invert(0) - _x.invert(d3.event.webkitMovementX), _y.invert(0) - _y.invert(d3.event.webkitMovementY)];
      bumpDomain(_x, [move[0], move[0]]);
      bumpDomain(_y, [move[1], move[1]]);
      return updateNotePositions();
    };
  });

}).call(this);
