// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require(['d3', 'jquery', 'underscore'], function(d3, $, _) {
    var Buses, geoSeparation, log;
    log = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return console.log.apply(console, args);
    };
    geoSeparation = function(from, to) {
      var b_2, c_2;
      b_2 = Math.pow(from.lat - to.lat, 2);
      c_2 = Math.pow(from.lat - to.lat, 2);
      return Math.pow(b_2 + c_2, 0.5);
    };
    (function() {
      var group_n, num, services, stops, stops_found, _fn;
      window.data = {};
      data.raw = Stops;
      data.stops = [];
      data.links = [];
      stops_found = {};
      services = data.raw;
      group_n = -1;
      _fn = function(num, stops) {
        var last_stop, s, _i, _len, _results;
        last_stop = null;
        group_n++;
        _results = [];
        for (_i = 0, _len = stops.length; _i < _len; _i++) {
          s = stops[_i];
          _results.push((function(s) {
            var link, stop;
            if (stops_found[s.code]) {
              stop = stops_found[s.code];
            } else {
              stop = s;
              stop.index = data.stops.length;
              data.stops.push(stop);
              stop.group = group_n;
              stops_found[stop.code] = stop;
            }
            if (last_stop) {
              link = {
                source: last_stop.index,
                target: stop.index,
                value: 1
              };
              data.links.push(link);
            }
            return last_stop = stop;
          })(s));
        }
        return _results;
      };
      for (num in services) {
        stops = services[num];
        _fn(num, stops);
      }
      return data;
    })();
    Buses = (function() {

      function Buses() {
        this.renderStops = __bind(this.renderStops, this);

        this.renderGeo = __bind(this.renderGeo, this);

        this.buildSVG = __bind(this.buildSVG, this);

      }

      Buses.prototype.render = function() {
        this.buildSVG();
        this.renderGeo();
        return this.renderStops();
      };

      Buses.prototype.c = {
        width: 1250,
        height: 650
      };

      Buses.prototype.buildSVG = function() {
        this.svg = d3.select('body').append('svg').attr('width', this.c.width).attr('height', this.c.height);
        return this.color = d3.scale.category20();
      };

      Buses.prototype.renderGeo = function() {
        var current_center, current_edinburgh, edinburgh, error,
          _this = this;
        edinburgh = [-3.22, 55.925];
        this.xy = d3.geo.mercator().scale(1000000).translate([this.c.width * 0.5, this.c.height * 0.5]);
        current_edinburgh = this.xy(edinburgh);
        current_center = this.xy.translate();
        error = [current_edinburgh[0] - current_center[0], current_edinburgh[1] - current_center[1]];
        this.xy.translate([current_center[0] - error[0], current_center[1] - error[1]]);
        this.path = d3.geo.path().projection(this.xy);
        this.states = this.svg.append('g').attr('id', 'states');
        return d3.json('../data/world-countries.json', function(coll) {
          return _this.states.selectAll('path').data(coll.features).enter().append('path').attr('d', _this.path);
        });
      };

      Buses.prototype.renderStops = function() {
        var stopToLatLong,
          _this = this;
        this.stops = this.svg.selectAll('circle.stop').data(data.stops);
        stopToLatLong = function(stop) {
          var ll;
          ll = _this.xy([parseFloat(stop.longitude), parseFloat(stop.latitude)]);
          return ll;
        };
        return this.stops.enter().append('circle').attr('class', 'stop').attr('r', 3).attr('cx', function(d) {
          return stopToLatLong(d)[0];
        }).attr('cy', function(d) {
          return stopToLatLong(d)[1];
        }).attr('fill', function(d) {
          return _this.color(d.group);
        });
      };

      return Buses;

    })();
    return $(function() {
      window.buses = new Buses;
      return buses.render();
    });
  });

}).call(this);
