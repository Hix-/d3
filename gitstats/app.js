// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  console.jlog = function(d) {
    return console.log(JSON.stringify(d));
  };

  require(['d3', 'underscore'], function(d3, _) {
    var config, svg, x, xaxis, y, yaxis;
    config = {
      width: 25000,
      height: 500,
      margin: 20
    };
    svg = d3.select('body').append('svg').attr('height', config.height).attr('width', config.width);
    xaxis = d3.scale.linear().range([config.margin, config.width - config.margin]);
    yaxis = d3.scale.linear().range([config.margin, config.height - config.margin]);
    x = xaxis;
    y = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return config.height - yaxis.apply(null, args);
    };
    return d3.json('gitstats.json', function(coll) {
      var c, commits, data, entered, last, ymax, ymin, _i, _len;
      data = [];
      last = null;
      for (_i = 0, _len = coll.length; _i < _len; _i++) {
        c = coll[_i];
        if (data.length === 0) {
          c.cumulative_lines = (c.insertions || 0) - (c.deletions || 0);
          data.push(c);
          last = c;
        } else {
          c.cumulative_lines = last.cumulative_lines + (c.insertions || 0) - (c.deletions || 0);
          data.push(c);
          last = c;
        }
      }
      xaxis.domain([data[0].date, data[data.length - 1].date]);
      ymin = d3.min(data, function(d) {
        return d.cumulative_lines - (d.deletions || 0);
      });
      ymax = d3.max(data, function(d) {
        return d.cumulative_lines + (d.insertions || 0);
      });
      yaxis.domain([ymin, ymax]);
      commits = svg.selectAll('g.commit').data(data, function(d) {
        return d.sha;
      });
      entered = commits.enter().append('svg:g').attr('class', 'commit');
      entered.append('circle').attr('r', function(d) {
        return 5;
      }).attr('cx', function(d) {
        return x(d.date);
      }).attr('cy', function(d) {
        return y(d.cumulative_lines);
      }).on('mouseover', function(d) {
        return console.log(d);
      });
      entered.append('line').attr('class', 'added').attr('x1', function(d) {
        return x(d.date);
      }).attr('x2', function(d) {
        return x(d.date);
      }).attr('y1', function(d) {
        return y(d.cumulative_lines);
      }).attr('y2', function(d) {
        if (d.insertions) {
          return y(d.cumulative_lines) - 10 * Math.log(10 * d.insertions);
        } else {
          return y(d.cumulative_lines);
        }
      });
      return entered.append('line').attr('class', 'deleted').attr('x1', function(d) {
        return x(d.date);
      }).attr('x2', function(d) {
        return x(d.date);
      }).attr('y1', function(d) {
        return y(d.cumulative_lines);
      }).attr('y2', function(d) {
        if (d.deletions) {
          x = y(d.cumulative_lines) + 10 * Math.log(10 * d.deletions);
          console.log('x', 10 * Math.log(d.deletions * 10), d.deletions);
          return x;
        } else {
          return y(d.cumulative_lines);
        }
      });
    });
  });

}).call(this);
